// Generated by Dagger (https://dagger.dev).
package one.gypsy.neatorganizer.di;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import one.gypsy.neatorganizer.data.repositories.people.PeopleRepository;
import one.gypsy.neatorganizer.domain.interactors.profile.GetPersonHistory;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class UseCaseModule_ProvideGetPersonProfileFactory implements Factory<GetPersonHistory> {
  private final UseCaseModule module;

  private final Provider<PeopleRepository> peopleRepositoryProvider;

  public UseCaseModule_ProvideGetPersonProfileFactory(UseCaseModule module,
      Provider<PeopleRepository> peopleRepositoryProvider) {
    this.module = module;
    this.peopleRepositoryProvider = peopleRepositoryProvider;
  }

  @Override
  public GetPersonHistory get() {
    return provideGetPersonProfile(module, peopleRepositoryProvider.get());
  }

  public static UseCaseModule_ProvideGetPersonProfileFactory create(UseCaseModule module,
      Provider<PeopleRepository> peopleRepositoryProvider) {
    return new UseCaseModule_ProvideGetPersonProfileFactory(module, peopleRepositoryProvider);
  }

  public static GetPersonHistory provideGetPersonProfile(UseCaseModule instance,
      PeopleRepository peopleRepository) {
    return Preconditions.checkNotNull(instance.provideGetPersonProfile(peopleRepository), "Cannot return null from a non-@Nullable @Provides method");
  }
}
