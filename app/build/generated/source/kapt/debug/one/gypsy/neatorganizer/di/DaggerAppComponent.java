// Generated by Dagger (https://dagger.dev).
package one.gypsy.neatorganizer.di;

import android.app.Application;
import androidx.lifecycle.ViewModel;
import dagger.android.AndroidInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.MapBuilder;
import dagger.internal.MapProviderFactory;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;
import one.gypsy.neatorganizer.data.database.OrganizerDatabase;
import one.gypsy.neatorganizer.data.database.dao.people.InteractionsDao;
import one.gypsy.neatorganizer.data.database.dao.people.PeopleDao;
import one.gypsy.neatorganizer.data.repositories.people.FileRepository;
import one.gypsy.neatorganizer.data.repositories.people.InteractionRepository;
import one.gypsy.neatorganizer.data.repositories.people.PeopleRepository;
import one.gypsy.neatorganizer.domain.datasource.people.DeviceFileDataSource;
import one.gypsy.neatorganizer.domain.datasource.people.UserCommunityDataSource;
import one.gypsy.neatorganizer.domain.datasource.people.UserInteractionDataSource;
import one.gypsy.neatorganizer.domain.interactors.people.AddInteractionEntry;
import one.gypsy.neatorganizer.domain.interactors.people.AddPerson;
import one.gypsy.neatorganizer.domain.interactors.people.GetAllPeople;
import one.gypsy.neatorganizer.domain.interactors.people.GetImageBitmap;
import one.gypsy.neatorganizer.domain.interactors.profile.GetPersonProfile;
import one.gypsy.neatorganizer.domain.interactors.people.GetPersonProfile_Factory;
import one.gypsy.neatorganizer.presentation.HomeActivity;
import one.gypsy.neatorganizer.presentation.HomeActivity_MembersInjector;
import one.gypsy.neatorganizer.presentation.OrganizerApplication;
import one.gypsy.neatorganizer.presentation.OrganizerApplication_MembersInjector;
import one.gypsy.neatorganizer.presentation.people.view.AddPersonDialogFragment;
import one.gypsy.neatorganizer.presentation.people.view.AddPersonDialogFragment_MembersInjector;
import one.gypsy.neatorganizer.presentation.people.view.PeopleFragment;
import one.gypsy.neatorganizer.presentation.people.view.PeopleFragment_MembersInjector;
import one.gypsy.neatorganizer.presentation.people.view.RateInteractionDialogFragment;
import one.gypsy.neatorganizer.presentation.people.vm.AddPersonViewModel;
import one.gypsy.neatorganizer.presentation.people.vm.AddPersonViewModel_Factory;
import one.gypsy.neatorganizer.presentation.people.vm.PeopleViewModel;
import one.gypsy.neatorganizer.presentation.people.vm.PeopleViewModel_Factory;
import one.gypsy.neatorganizer.presentation.people.vm.RateInteractionViewModel;
import one.gypsy.neatorganizer.presentation.people.vm.RateInteractionViewModel_AssistedFactory;
import one.gypsy.neatorganizer.presentation.profile.PersonProfileFragment;
import one.gypsy.neatorganizer.presentation.profile.vm.PersonProfileViewModel;
import one.gypsy.neatorganizer.presentation.profile.vm.PersonProfileViewModel_AssistedFactory;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent implements AppComponent {
  private Provider<ActivityModule_ContributeHomeActivity.HomeActivitySubcomponent.Factory> homeActivitySubcomponentFactoryProvider;

  private Provider<FragmentModule_ContributePeopleFragment.PeopleFragmentSubcomponent.Factory> peopleFragmentSubcomponentFactoryProvider;

  private Provider<FragmentModule_ContributeAddPersonFragment.AddPersonDialogFragmentSubcomponent.Factory> addPersonDialogFragmentSubcomponentFactoryProvider;

  private Provider<FragmentModule_ContributePersonProfileFragment.PersonProfileFragmentSubcomponent.Factory> personProfileFragmentSubcomponentFactoryProvider;

  private Provider<FragmentModule_ContributeRateInteractionFragment.RateInteractionDialogFragmentSubcomponent.Factory> rateInteractionDialogFragmentSubcomponentFactoryProvider;

  private Provider<Application> applicationProvider;

  private Provider<OrganizerDatabase> provideDatabaseProvider;

  private Provider<PeopleDao> providePeopleRepositoryProvider;

  private Provider<UserCommunityDataSource> provideUserCommunityDataSourceProvider;

  private Provider<PeopleRepository> providePeopleRepositoryProvider2;

  private Provider<GetPersonProfile> getPersonProfileProvider;

  private Provider<InteractionsDao> provideInteractionRepositoryProvider;

  private Provider<UserInteractionDataSource> provideUserInteractionDataSourceProvider;

  private Provider<InteractionRepository> provideInteractionRepositoryProvider2;

  private Provider<AddInteractionEntry> provideAddInteractionEntryUseCaseProvider;

  private Provider<GetAllPeople> provideGetAllPeopleUseCaseProvider;

  private Provider<PeopleViewModel> peopleViewModelProvider;

  private Provider<AddPerson> provideAddPersonUseCaseProvider;

  private Provider<DeviceFileDataSource> provideDeviceFileDataSourceProvider;

  private Provider<FileRepository> provideFileRepositoryProvider;

  private Provider<GetImageBitmap> provideGetImageBitmapUseCaseProvider;

  private Provider<AddPersonViewModel> addPersonViewModelProvider;

  private Provider<Map<Class<? extends ViewModel>, Provider<ViewModel>>> mapOfClassOfAndProviderOfViewModelProvider;

  private Provider<ViewModelFactory> viewModelFactoryProvider;

  private DaggerAppComponent(DaggerDataModule daggerDataModuleParam,
      DataSourceModule dataSourceModuleParam, RepositoryModule repositoryModuleParam,
      UseCaseModule useCaseModuleParam, Application applicationParam) {

    initialize(daggerDataModuleParam, dataSourceModuleParam, repositoryModuleParam, useCaseModuleParam, applicationParam);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
      ) {
    return MapBuilder.<Class<?>, Provider<AndroidInjector.Factory<?>>>newMapBuilder(5).put(HomeActivity.class, (Provider) homeActivitySubcomponentFactoryProvider).put(PeopleFragment.class, (Provider) peopleFragmentSubcomponentFactoryProvider).put(AddPersonDialogFragment.class, (Provider) addPersonDialogFragmentSubcomponentFactoryProvider).put(PersonProfileFragment.class, (Provider) personProfileFragmentSubcomponentFactoryProvider).put(RateInteractionDialogFragment.class, (Provider) rateInteractionDialogFragmentSubcomponentFactoryProvider).build();}

  private DispatchingAndroidInjector<Object> getDispatchingAndroidInjectorOfObject() {
    return DispatchingAndroidInjector_Factory.newInstance(getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());}

  private PersonProfileViewModel_AssistedFactory getPersonProfileViewModel_AssistedFactory() {
    return new PersonProfileViewModel_AssistedFactory(getPersonProfileProvider);}

  private RateInteractionViewModel_AssistedFactory getRateInteractionViewModel_AssistedFactory() {
    return new RateInteractionViewModel_AssistedFactory(provideAddInteractionEntryUseCaseProvider);}

  @SuppressWarnings("unchecked")
  private void initialize(final DaggerDataModule daggerDataModuleParam,
      final DataSourceModule dataSourceModuleParam, final RepositoryModule repositoryModuleParam,
      final UseCaseModule useCaseModuleParam, final Application applicationParam) {
    this.homeActivitySubcomponentFactoryProvider = new Provider<ActivityModule_ContributeHomeActivity.HomeActivitySubcomponent.Factory>() {
      @Override
      public ActivityModule_ContributeHomeActivity.HomeActivitySubcomponent.Factory get() {
        return new HomeActivitySubcomponentFactory();}
    };
    this.peopleFragmentSubcomponentFactoryProvider = new Provider<FragmentModule_ContributePeopleFragment.PeopleFragmentSubcomponent.Factory>() {
      @Override
      public FragmentModule_ContributePeopleFragment.PeopleFragmentSubcomponent.Factory get() {
        return new PeopleFragmentSubcomponentFactory();}
    };
    this.addPersonDialogFragmentSubcomponentFactoryProvider = new Provider<FragmentModule_ContributeAddPersonFragment.AddPersonDialogFragmentSubcomponent.Factory>() {
      @Override
      public FragmentModule_ContributeAddPersonFragment.AddPersonDialogFragmentSubcomponent.Factory get(
          ) {
        return new AddPersonDialogFragmentSubcomponentFactory();}
    };
    this.personProfileFragmentSubcomponentFactoryProvider = new Provider<FragmentModule_ContributePersonProfileFragment.PersonProfileFragmentSubcomponent.Factory>() {
      @Override
      public FragmentModule_ContributePersonProfileFragment.PersonProfileFragmentSubcomponent.Factory get(
          ) {
        return new PersonProfileFragmentSubcomponentFactory();}
    };
    this.rateInteractionDialogFragmentSubcomponentFactoryProvider = new Provider<FragmentModule_ContributeRateInteractionFragment.RateInteractionDialogFragmentSubcomponent.Factory>() {
      @Override
      public FragmentModule_ContributeRateInteractionFragment.RateInteractionDialogFragmentSubcomponent.Factory get(
          ) {
        return new RateInteractionDialogFragmentSubcomponentFactory();}
    };
    this.applicationProvider = InstanceFactory.create(applicationParam);
    this.provideDatabaseProvider = DoubleCheck.provider(DaggerDataModule_ProvideDatabaseFactory.create(daggerDataModuleParam, applicationProvider));
    this.providePeopleRepositoryProvider = DaggerDataModule_ProvidePeopleRepositoryFactory.create(daggerDataModuleParam, provideDatabaseProvider);
    this.provideUserCommunityDataSourceProvider = DataSourceModule_ProvideUserCommunityDataSourceFactory.create(dataSourceModuleParam, providePeopleRepositoryProvider);
    this.providePeopleRepositoryProvider2 = RepositoryModule_ProvidePeopleRepositoryFactory.create(repositoryModuleParam, provideUserCommunityDataSourceProvider);
    this.getPersonProfileProvider = GetPersonProfile_Factory.create(providePeopleRepositoryProvider2);
    this.provideInteractionRepositoryProvider = DaggerDataModule_ProvideInteractionRepositoryFactory.create(daggerDataModuleParam, provideDatabaseProvider);
    this.provideUserInteractionDataSourceProvider = DataSourceModule_ProvideUserInteractionDataSourceFactory.create(dataSourceModuleParam, provideInteractionRepositoryProvider);
    this.provideInteractionRepositoryProvider2 = RepositoryModule_ProvideInteractionRepositoryFactory.create(repositoryModuleParam, provideUserInteractionDataSourceProvider);
    this.provideAddInteractionEntryUseCaseProvider = UseCaseModule_ProvideAddInteractionEntryUseCaseFactory.create(useCaseModuleParam, provideInteractionRepositoryProvider2);
    this.provideGetAllPeopleUseCaseProvider = UseCaseModule_ProvideGetAllPeopleUseCaseFactory.create(useCaseModuleParam, providePeopleRepositoryProvider2);
    this.peopleViewModelProvider = PeopleViewModel_Factory.create(provideGetAllPeopleUseCaseProvider);
    this.provideAddPersonUseCaseProvider = UseCaseModule_ProvideAddPersonUseCaseFactory.create(useCaseModuleParam, providePeopleRepositoryProvider2);
    this.provideDeviceFileDataSourceProvider = DataSourceModule_ProvideDeviceFileDataSourceFactory.create(dataSourceModuleParam, applicationProvider);
    this.provideFileRepositoryProvider = RepositoryModule_ProvideFileRepositoryFactory.create(repositoryModuleParam, provideDeviceFileDataSourceProvider);
    this.provideGetImageBitmapUseCaseProvider = UseCaseModule_ProvideGetImageBitmapUseCaseFactory.create(useCaseModuleParam, provideFileRepositoryProvider);
    this.addPersonViewModelProvider = AddPersonViewModel_Factory.create(provideAddPersonUseCaseProvider, provideGetImageBitmapUseCaseProvider);
    this.mapOfClassOfAndProviderOfViewModelProvider = MapProviderFactory.<Class<? extends ViewModel>, ViewModel>builder(2).put(PeopleViewModel.class, (Provider) peopleViewModelProvider).put(AddPersonViewModel.class, (Provider) addPersonViewModelProvider).build();
    this.viewModelFactoryProvider = DoubleCheck.provider(ViewModelFactory_Factory.create(mapOfClassOfAndProviderOfViewModelProvider));
  }

  @Override
  public void inject(OrganizerApplication organizerApp) {
    injectOrganizerApplication(organizerApp);}

  @Override
  public PersonProfileViewModel.Factory getPersonProfileViewModelFactory() {
    return getPersonProfileViewModel_AssistedFactory();}

  @Override
  public RateInteractionViewModel.Factory getRateInteractionViewModelFactory() {
    return getRateInteractionViewModel_AssistedFactory();}

  private OrganizerApplication injectOrganizerApplication(OrganizerApplication instance) {
    OrganizerApplication_MembersInjector.injectDispatchingAndroidInjector(instance, getDispatchingAndroidInjectorOfObject());
    return instance;
  }

  private static final class Builder implements AppComponent.Builder {
    private Application application;

    @Override
    public Builder application(Application application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }

    @Override
    public AppComponent build() {
      Preconditions.checkBuilderRequirement(application, Application.class);
      return new DaggerAppComponent(new DaggerDataModule(), new DataSourceModule(), new RepositoryModule(), new UseCaseModule(), application);
    }
  }

  private final class HomeActivitySubcomponentFactory implements ActivityModule_ContributeHomeActivity.HomeActivitySubcomponent.Factory {
    @Override
    public ActivityModule_ContributeHomeActivity.HomeActivitySubcomponent create(
        HomeActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new HomeActivitySubcomponentImpl(arg0);
    }
  }

  private final class HomeActivitySubcomponentImpl implements ActivityModule_ContributeHomeActivity.HomeActivitySubcomponent {
    private HomeActivitySubcomponentImpl(HomeActivity arg0) {

    }

    private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
        ) {
      return MapBuilder.<Class<?>, Provider<AndroidInjector.Factory<?>>>newMapBuilder(5).put(HomeActivity.class, (Provider) DaggerAppComponent.this.homeActivitySubcomponentFactoryProvider).put(PeopleFragment.class, (Provider) DaggerAppComponent.this.peopleFragmentSubcomponentFactoryProvider).put(AddPersonDialogFragment.class, (Provider) DaggerAppComponent.this.addPersonDialogFragmentSubcomponentFactoryProvider).put(PersonProfileFragment.class, (Provider) DaggerAppComponent.this.personProfileFragmentSubcomponentFactoryProvider).put(RateInteractionDialogFragment.class, (Provider) DaggerAppComponent.this.rateInteractionDialogFragmentSubcomponentFactoryProvider).build();}

    private DispatchingAndroidInjector<Object> getDispatchingAndroidInjectorOfObject() {
      return DispatchingAndroidInjector_Factory.newInstance(getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());}

    @Override
    public void inject(HomeActivity arg0) {
      injectHomeActivity(arg0);}

    private HomeActivity injectHomeActivity(HomeActivity instance) {
      HomeActivity_MembersInjector.injectDispatchingAndroidInjector(instance, getDispatchingAndroidInjectorOfObject());
      return instance;
    }

    private final class PeopleFragmentSubcomponentFactory implements FragmentModule_ContributePeopleFragment.PeopleFragmentSubcomponent.Factory {
      @Override
      public FragmentModule_ContributePeopleFragment.PeopleFragmentSubcomponent create(
          PeopleFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new PeopleFragmentSubcomponentImpl(arg0);
      }
    }

    private final class PeopleFragmentSubcomponentImpl implements FragmentModule_ContributePeopleFragment.PeopleFragmentSubcomponent {
      private PeopleFragmentSubcomponentImpl(PeopleFragment arg0) {

      }

      @Override
      public void inject(PeopleFragment arg0) {
        injectPeopleFragment(arg0);}

      private PeopleFragment injectPeopleFragment(PeopleFragment instance) {
        PeopleFragment_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class AddPersonDialogFragmentSubcomponentFactory implements FragmentModule_ContributeAddPersonFragment.AddPersonDialogFragmentSubcomponent.Factory {
      @Override
      public FragmentModule_ContributeAddPersonFragment.AddPersonDialogFragmentSubcomponent create(
          AddPersonDialogFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new AddPersonDialogFragmentSubcomponentImpl(arg0);
      }
    }

    private final class AddPersonDialogFragmentSubcomponentImpl implements FragmentModule_ContributeAddPersonFragment.AddPersonDialogFragmentSubcomponent {
      private AddPersonDialogFragmentSubcomponentImpl(AddPersonDialogFragment arg0) {

      }

      @Override
      public void inject(AddPersonDialogFragment arg0) {
        injectAddPersonDialogFragment(arg0);}

      private AddPersonDialogFragment injectAddPersonDialogFragment(
          AddPersonDialogFragment instance) {
        AddPersonDialogFragment_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class PersonProfileFragmentSubcomponentFactory implements FragmentModule_ContributePersonProfileFragment.PersonProfileFragmentSubcomponent.Factory {
      @Override
      public FragmentModule_ContributePersonProfileFragment.PersonProfileFragmentSubcomponent create(
          PersonProfileFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new PersonProfileFragmentSubcomponentImpl(arg0);
      }
    }

    private final class PersonProfileFragmentSubcomponentImpl implements FragmentModule_ContributePersonProfileFragment.PersonProfileFragmentSubcomponent {
      private PersonProfileFragmentSubcomponentImpl(PersonProfileFragment arg0) {

      }

      @Override
      public void inject(PersonProfileFragment arg0) {
      }
    }

    private final class RateInteractionDialogFragmentSubcomponentFactory implements FragmentModule_ContributeRateInteractionFragment.RateInteractionDialogFragmentSubcomponent.Factory {
      @Override
      public FragmentModule_ContributeRateInteractionFragment.RateInteractionDialogFragmentSubcomponent create(
          RateInteractionDialogFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new RateInteractionDialogFragmentSubcomponentImpl(arg0);
      }
    }

    private final class RateInteractionDialogFragmentSubcomponentImpl implements FragmentModule_ContributeRateInteractionFragment.RateInteractionDialogFragmentSubcomponent {
      private RateInteractionDialogFragmentSubcomponentImpl(RateInteractionDialogFragment arg0) {

      }

      @Override
      public void inject(RateInteractionDialogFragment arg0) {
      }
    }
  }

  private final class PeopleFragmentSubcomponentFactory implements FragmentModule_ContributePeopleFragment.PeopleFragmentSubcomponent.Factory {
    @Override
    public FragmentModule_ContributePeopleFragment.PeopleFragmentSubcomponent create(
        PeopleFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new PeopleFragmentSubcomponentImpl(arg0);
    }
  }

  private final class PeopleFragmentSubcomponentImpl implements FragmentModule_ContributePeopleFragment.PeopleFragmentSubcomponent {
    private PeopleFragmentSubcomponentImpl(PeopleFragment arg0) {

    }

    @Override
    public void inject(PeopleFragment arg0) {
      injectPeopleFragment(arg0);}

    private PeopleFragment injectPeopleFragment(PeopleFragment instance) {
      PeopleFragment_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
      return instance;
    }
  }

  private final class AddPersonDialogFragmentSubcomponentFactory implements FragmentModule_ContributeAddPersonFragment.AddPersonDialogFragmentSubcomponent.Factory {
    @Override
    public FragmentModule_ContributeAddPersonFragment.AddPersonDialogFragmentSubcomponent create(
        AddPersonDialogFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new AddPersonDialogFragmentSubcomponentImpl(arg0);
    }
  }

  private final class AddPersonDialogFragmentSubcomponentImpl implements FragmentModule_ContributeAddPersonFragment.AddPersonDialogFragmentSubcomponent {
    private AddPersonDialogFragmentSubcomponentImpl(AddPersonDialogFragment arg0) {

    }

    @Override
    public void inject(AddPersonDialogFragment arg0) {
      injectAddPersonDialogFragment(arg0);}

    private AddPersonDialogFragment injectAddPersonDialogFragment(
        AddPersonDialogFragment instance) {
      AddPersonDialogFragment_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
      return instance;
    }
  }

  private final class PersonProfileFragmentSubcomponentFactory implements FragmentModule_ContributePersonProfileFragment.PersonProfileFragmentSubcomponent.Factory {
    @Override
    public FragmentModule_ContributePersonProfileFragment.PersonProfileFragmentSubcomponent create(
        PersonProfileFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new PersonProfileFragmentSubcomponentImpl(arg0);
    }
  }

  private final class PersonProfileFragmentSubcomponentImpl implements FragmentModule_ContributePersonProfileFragment.PersonProfileFragmentSubcomponent {
    private PersonProfileFragmentSubcomponentImpl(PersonProfileFragment arg0) {

    }

    @Override
    public void inject(PersonProfileFragment arg0) {
    }
  }

  private final class RateInteractionDialogFragmentSubcomponentFactory implements FragmentModule_ContributeRateInteractionFragment.RateInteractionDialogFragmentSubcomponent.Factory {
    @Override
    public FragmentModule_ContributeRateInteractionFragment.RateInteractionDialogFragmentSubcomponent create(
        RateInteractionDialogFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new RateInteractionDialogFragmentSubcomponentImpl(arg0);
    }
  }

  private final class RateInteractionDialogFragmentSubcomponentImpl implements FragmentModule_ContributeRateInteractionFragment.RateInteractionDialogFragmentSubcomponent {
    private RateInteractionDialogFragmentSubcomponentImpl(RateInteractionDialogFragment arg0) {

    }

    @Override
    public void inject(RateInteractionDialogFragment arg0) {
    }
  }
}
